%{
#include <iostream>
#include <string>
#include "SymbolsTable.hpp"
#include "Compiler.hpp"
using namespace std;

int yylex();
extern SymbolsTable * symbolsTable;
extern Compiler * compiler;
void yyerror(char const *);
%}

%union
{
	long long num;
	const char * str;
}

%token DECLARE
%token KW_BEGIN
%token END

%token READ
%token WRITE

%token ASSIGN

%token PLUS
%token MINUS
%token TIMES
%token DIV
%token MOD

%token IF
%token THEN
%token ELSE
%token ENDIF

%token EQ
%token NEQ
%token LE
%token GE
%token LEQ
%token GEQ

%token FOR
%token FROM
%token TO
%token DOWNTO
%token DO
%token ENDFOR

%token WHILE
%token ENDWHILE

%token <str> PIDENTIFIER
%token <num> NUMBER

%type <str> identifier
%type <num> expression

%%
program:
	DECLARE {symbolsTable -> varDeclaration("#copy");} declarations KW_BEGIN commands END {compiler -> endProgram();}
|	{symbolsTable -> varDeclaration("#copy");} KW_BEGIN commands END {compiler -> endProgram();}

declarations:
	declarations ',' PIDENTIFIER {symbolsTable -> varDeclaration($3);}
|	declarations ',' PIDENTIFIER '(' NUMBER ':' NUMBER ')' {symbolsTable -> varDeclaration($3, $5, $7);}
|	PIDENTIFIER {symbolsTable -> varDeclaration($1);}
|	PIDENTIFIER '(' NUMBER ':' NUMBER ')' {symbolsTable -> varDeclaration($1, $3, $5);}

commands:
	commands command {compiler -> clear();}
|	command {compiler -> clear();}

command:
	identifier {compiler -> placeToStore($1); compiler -> clear();} ASSIGN expression ';' {compiler -> assign($1, $4);}
|	IF condition /*{compiler -> clear();}*/ THEN commands {compiler -> addJump(); compiler -> endElse();} ELSE commands ENDIF {compiler -> endIf();}
|	IF condition /*{compiler -> clear();}*/ THEN commands ENDIF {compiler -> endIf();}
|	WHILE {compiler -> setWhileFlag();} condition DO commands ENDWHILE {compiler -> endWhile();}
|	FOR PIDENTIFIER FROM value TO {symbolsTable -> varDeclaration($2); symbolsTable -> initVariable($2); compiler -> evaluateExpression(); compiler -> copy(); compiler -> clear();}value {compiler -> evaluateExpression(); compiler -> forAsc($2);} DO commands ENDFOR {compiler -> endFor($2);}
|	FOR PIDENTIFIER FROM value DOWNTO {symbolsTable -> varDeclaration($2); symbolsTable -> initVariable($2); compiler -> evaluateExpression(); compiler -> copy(); compiler -> clear();}value {compiler -> evaluateExpression(); compiler -> forDesc($2);} DO commands ENDFOR {compiler -> endForDesc($2);}
|	READ identifier ';' {compiler -> read($2);}
|	WRITE value ';' {compiler -> write();}

expression:
	value {compiler -> evaluateExpression();}
|	value {compiler -> evaluateExpression(); compiler -> copy(); compiler -> clear();} PLUS value {compiler -> evaluateExpression(); compiler -> add();}
|	value {compiler -> evaluateExpression(); compiler -> copy(); compiler -> clear();} MINUS value {compiler -> evaluateExpression(); compiler -> sub();}
|	value {compiler -> evaluateExpression(); compiler -> copy(); compiler -> clear();} TIMES value {compiler -> evaluateExpression(); compiler -> mul();}
|	value {compiler -> evaluateExpression(); compiler -> copy(); compiler -> clear();} DIV value {compiler -> evaluateExpression(); compiler -> div();}
|	value {compiler -> evaluateExpression(); compiler -> copy(); compiler -> clear();} MOD value {compiler -> evaluateExpression(); compiler -> mod();}

condition:
	value {compiler -> evaluateExpression(); compiler -> copy(); compiler -> clear();} EQ value {compiler -> evaluateExpression(); compiler -> condEq();}
|	value {compiler -> evaluateExpression(); compiler -> copy(); compiler -> clear();} NEQ value {compiler -> evaluateExpression(); compiler -> condNeq();}
|	value {compiler -> evaluateExpression(); compiler -> copy(); compiler -> clear();} LE value {compiler -> evaluateExpression(); compiler -> condLe();}
|	value {compiler -> evaluateExpression(); compiler -> copy(); compiler -> clear();} GE value {compiler -> evaluateExpression(); compiler -> condGe();}
|	value {compiler -> evaluateExpression(); compiler -> copy(); compiler -> clear();} LEQ value {compiler -> evaluateExpression(); compiler -> condLeq();}
|	value {compiler -> evaluateExpression(); compiler -> copy(); compiler -> clear();} GEQ value {compiler -> evaluateExpression(); compiler -> condGeq();}

value:
	NUMBER {compiler -> whileJump(); compiler -> generateConstant($1); compiler -> setValueNumber();}
|	identifier {compiler -> whileJump(); compiler -> setIdentifierFlag(); compiler -> setIdentifier($1);}

identifier:
	PIDENTIFIER {compiler -> setIdentifier($1);}
|	PIDENTIFIER '(' PIDENTIFIER ')' {compiler -> setIndexIdentifier($3);}
|	PIDENTIFIER '(' NUMBER ')' {compiler -> setNumberIdentifier($3);}

%%

void yyerror(char const * s)
{
	cerr << s << endl;
}
